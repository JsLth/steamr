% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/reviews.R
\name{get_app_reviews}
\alias{get_app_reviews}
\alias{get_app_review}
\alias{get_review_histogram}
\title{Get reviews}
\usage{
get_app_reviews(
  appid,
  day_range = NULL,
  start_date = NULL,
  end_date = NULL,
  date_range_type = NULL,
  filter = "all",
  language = "all",
  review_type = "all",
  purchase_type = "steam",
  playtime = c(0, 0),
  filter_offtopic_activity = TRUE,
  summary_num_positive_reviews = NULL,
  summary_num_reviews = NULL,
  paginate = FALSE,
  max_pages = Inf
)

get_app_review(steamids, appids)

get_review_histogram(appid, language = "english", review_score_preference = 2)
}
\arguments{
\item{appid}{Application ID referencing a Steam application. There are
generally two ways of retrieving an application ID. The first one is to
inspect the URL of a Steam game. For example the application ID of
Counter-Strike is 10:
\code{https://store.steampowered.com/app/10/CounterStrike/}.

It is also possible to retrieve application IDs programmatically by
exploiting Steam's search API. For details see \code{\link{search_apps}}.}

\item{day_range}{Number of days from now to \code{n} days ago to look for
reviews.}

\item{start_date}{Date-time object describing the earliest time to look for
reviews. Ignored if \code{date_range_type = "all"}.}

\item{end_date}{Date-time object describing the latest time to look for
reviews. Ignored if \code{date_range_type = "all"}.}

\item{date_range_type}{Specifies what to do with reviews within the
date range set by \code{start_date} and \code{end_date}. Options include
\code{include}, \code{exclude}, and \code{all}. If \code{all}, ignores
\code{end_date} and \code{start_date}.}

\item{filter}{Specifies the sort order. Can be one of \code{summary},
\code{recent}, \code{updated}, and \code{all}. \code{summary} returns
a summary of 10 most helpful comments. \code{all} sorts by helpfulness
and applies moving windows in order to always return reviews. \code{recent}
sorts by creation time and \code{updated} sorts by update time. For
\code{get_all_app_reviews}, \code{filter} must be either \code{updated} or
\code{recent}.}

\item{language}{Which review language to include in the output. A full
list of platform supported languages can be found in the
\href{https://partner.steamgames.com/doc/store/localization/languages}{Steamworks documentation}.}

\item{review_type}{Filters by the type of review. Can be either
\code{positive}, \code{negative}, or \code{all}.}

\item{purchase_type}{Filters by the type of purchase. Can be either
\code{steam}, \code{non_steam_purchase}, or \code{all}.}

\item{playtime}{Length-2 numeric vector specifying the minimum and maximum
playtime in hours that the reviewer should have played the game. If
\code{0}, no required (minimum or maximum) play time is set.}

\item{filter_offtopic_activity}{Whether to filter offtopic activity. This
especially includes so-called "review bombs", i.e. many reviews written
by users in a very short time to artificially alter the review score of a
game. See the Steam
\href{https://steamcommunity.com/games/593110/announcements/detail/1808664240333155775}{blog entry}
for more information.}

\item{paginate}{If \code{TRUE}, paginates through the results. Some methods
provide data access in digestible chunks and do not return all available
information at once. The \code{paginate} automatically retrieves all pages
until \code{max_pages} is reached.}

\item{max_pages}{Maximum number of pages to paginate. Ignored if
\code{paginate} is \code{FALSE}. Defaults to \code{Inf} such that all
available data are paginated.}

\item{steamids}{A vector of steamIDs corresponding to the appIDs in
\code{appids}. SteamIDs are recycled to match the length of \code{appids}.}

\item{appids}{A vector of multiple appIDs of applications in the Steam store.}

\item{review_score_preference}{Unknown.}

\item{cursor}{For each review page query, \code{get_app_reviews} returns a
cursor ID. This ID can be used to paginate and iterate through many review pages
at once. This argument is probably useless for most use cases and is
extensively used for iteration purposes by \code{get_all_app_reviews}.}

\item{appIDs}{A vector of appIDs written by the steamIDs in \code{steamids}.
AppIDs are recycled to match the length of \code{steamids}.}
}
\value{
\describe{
 \item{get_app_reviews}{A dataframe containing information about the review.
 \code{recommendationid} contains the unique recommendationID. \code{language}
 contains the language of the review. \code{review} contains the review
 text. The \code{weighted_vote_score} represents Steams helpfulness weighting
 as described \href{https://steamcommunity.com/games/593110/announcements/detail/2666556941788470579}{here}.
 Weights closer to one indicate a higher helpfulness.}

 \item{get_app_review}{A dataframe similar to the one returned by
 \code{get_app_reviews}, but with more detailed and undocumented metadata.}

 \item{get_review_histogram}{A list containing two dataframes \code{rollups}
 and \code{recent}. Both dataframes contain the date and the corresponding
 upvotes and downvotes. \code{rollups} is for all reviews, \code{recent} only
 for the last month.}
}
}
\description{
Retrieve user reviews for a given Steam application or from a specific user.
Generate review histograms.
}
\examples{
# reviews of counter-strike
get_app_reviews(10)

# get all negative bulgarian reviews
get_app_reviews(10, language = "bulgarian", review_type = "negative")

# replicate steam histogram
has_pkgs <- require(tidyr) &&
  require(dplyr) &&
  require(ggplot2) &&
  require(ggtext)

if (has_pkgs) {
  histo <- get_review_histogram("440", language = NULL, review_score_preference = 2)

  rollups <- histo$rollups \%>\%
    mutate(recommendations_down = recommendations_down * -1) \%>\%
    pivot_longer(
      cols = starts_with("rec"),
      names_prefix = "recommendations_",
      names_to = "vote"
    )

  ggplot(rollups) +
    aes(x = date, y = value, fill = vote) +
    geom_bar(
      stat = "identity",
      show.legend = FALSE,
      width = resolution(as.double(rollups$date) * 0.5)
    ) +
    geom_hline(yintercept = 0, color = "#66c0f4") +
    scale_x_datetime(date_breaks = "2 years", date_labels = "\%b \%Y", expand = c(0, 0)) +
    scale_y_continuous(expand = expansion(mult = c(0, 0.05))) +
    scale_fill_manual(values = c(up = "#66c0f4", down = "#a34c25")) +
    labs(
      title = "Overall reviews:",
      subtitle = sprintf(
        paste(
          "<b style='color:#66c0f4;font-size:20px;text-shadow:8px 8px 16px",
          "#000000aa;font-weight:bold'>Very Positive</b> <span style='color:#8ba6b6;",
          "font-size:15px'>(\%s reviews)</span>"
        ),
        format(sum(abs(rollups$value)), big.mark = ",")
      ),
      x = NULL,
      y = NULL
    ) +
    theme_minimal() +
    annotate(
      geom = "segment",
      y = as.POSIXct(Inf), yend = as.POSIXct(Inf),
      x = as.POSIXct(-Inf), xend = as.POSIXct(Inf)
    ) +
    theme(
      plot.background = element_rect(fill = "#2a475e"),
      text = element_text(color = "white"),
      panel.grid = element_blank(),
      axis.line = element_blank(),
      title = element_markdown(),
      axis.text.y = element_text(color = "white"),
      axis.text.x = element_text(color = "#66c0f4")
    )
}

\dontrun{
# requires authentication
# get reviews for a single steamID
get_app_review("76561198092541763", c(730, 220200))
}
}
