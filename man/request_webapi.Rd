% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/http.R
\name{request_webapi}
\alias{request_webapi}
\alias{request_storefront}
\alias{request_steamspy}
\alias{request_generic}
\alias{public_api}
\alias{partner_api}
\alias{store_api}
\alias{comm_api}
\alias{valve_api}
\title{API requests}
\usage{
request_webapi(
  api,
  interface,
  method,
  version = "v1",
  params = list(),
  http_method = "GET",
  simplify = TRUE,
  paginate = NULL,
  format = c("json", "xml", "vdf"),
  cache = FALSE,
  serror = TRUE,
  dry = FALSE
)

request_storefront(
  api,
  interface,
  method,
  params = list(),
  params_as_query = TRUE,
  http_method = "GET",
  simplify = TRUE,
  paginate = NULL,
  rate = NULL,
  cache = FALSE,
  dry = FALSE
)

request_steamspy(params)

request_generic(
  url,
  params = NULL,
  http_method = "GET",
  format = "json",
  ...,
  headers = NULL,
  options = NULL,
  dry = FALSE
)

public_api()

partner_api()

store_api()

comm_api()

valve_api()
}
\arguments{
\item{api}{URL to a supported Steam API. Can be \code{public_api()}
(public Web API), \code{partner_api()} (private Web API),
\code{store_api()} (store.steampowered), \code{comm_api()} (steamcommunity),
or \code{valve_api()} (valvesoftware). Can also be any other host.}

\item{interface}{Interface containing the API method.}

\item{method}{Method that is to be requested.}

\item{version}{Version string of the API method. Usually, this is \code{v1},
sometimes it is \code{v2}, and in rare occasions it can go as high as
\code{v3}.}

\item{params}{A list of parameters to send with the request. Note that
\code{input_json} blobs need to be pre-formatted. Most (but not all)
methods require an API key in the \code{key} parameter. Authenticated
methods require an access_token in \code{access_token}.}

\item{http_method}{HTTP method to be used. The Steam Web API and storefront
API only take \code{GET} and \code{POST}.}

\item{simplify}{Whether to simplify the output or leave it as a nested
list.}

\item{paginate}{If specified, tries to paginate through response pages.
Must be a named list containing parameters for the pagination process.
Can contain the following keys:

\describe{
 \item{method}{Can be one of \code{cursor}, \code{offset}, and \code{input_json}.
 \code{cursor} takes the \code{next_cursor} value of the response and
 re-inserts it in the \code{cursor} parameter of the next request
 (see \code{\link[httr2]{iterate_with_cursor}}). \code{offset} takes
 increments the \code{page} parameter by 1 with
 each request (see \code{\link[httr2]{iterate_with_offset}}).
 \code{input_json} re-creates the \code{input_json} blob
 with an incremented \code{page} parameter with each request.}

 \item{limit}{Integer specifying the maximum number of requests or pages
 sent. If \code{limit = 3}, returns the first three pages.}

 \item{cursor}{If \code{method} is cursor, specifies the name of the
 cursor parameter in the request. Defaults to \code{"cursor"}}.

 \item{next_cursor}{If \code{method} is cursor, specifies the name of the
 response key giving the next cursor. Defaults to \code{"next_cursor"}}.

 \item{content_field}{If \code{method} is cursor, specifies the field name
 that must be populated with contents in order to continue paginating.
 If not specified, defaults to the first field. This can be useful if
 the only indicator of pagination ending is if a certain field is not
 present in the response.}

 \item{total_count}{If \code{method} is start, specifies the name of the
 response field giving the total number of results.}

 \item{page_size}{If \code{method} is start, specifies the total number
 of results per page.}
}}

\item{format}{Format of the response. One of \code{json}, \code{xml}, or
\code{vdf}. \code{vdf} is Steam's
\href{https://developer.valvesoftware.com/wiki/KeyValues}{KeyValues} format,
which can be parsed using \code{\link{parse_vdf}}.}

\item{serror}{Whether to throw a formatted error when the response has the
\code{X-eresult} header signifying an API error.}

\item{dry}{If \code{TRUE} does not run the request, but returns the
result of a dry run to a local server. See \code{\link[httr2]{req_dry_run}}.}

\item{params_as_query}{In most storefront endpoints, parameters are
passed as a URL query (i.e. \code{domain.org/path?name=param}). However, some endpoints expect them to be passed
as a URL path (i.e. \code{domain.org/path/param1/param2}). If \code{FALSE}, constructs parameters as a URL path,
otherwise as a query.}

\item{url}{URL to send a request to.}

\item{...}{Further arguments passed to the parsing function defined
by \code{format}, i.e. \code{\link[httr2]{resp_body_json}},
\code{\link[httr2]{resp_body_xml}} or \code{\link[httr2]{resp_body_string}}.}

\item{headers}{Key-value pairs of additional headers to append to the
request.}
}
\value{
The formatted response of the request. If \code{format = "json"},
formats the response as a list or dataframe (depending on the
\code{simplify} argument). If \code{format = "xml"}, returns an \code{xml}
object of the \code{\link[xml2]{xml2}} library. If \code{format = "vdf"},
returns the unformatted string of a VDF document that can be parsed with
\code{\link{parse_vdf}}.
}
\description{
Send HTTP requests to any of the available Steam APIs. As of yet,
\code{steamr} supports the Web API, storefront API, SteamSpy and
steamcmd.net. Generic requests to any other URL can also be made.

These functions are particularly useful to serve use cases not covered by
the high-level functions of \code{steamr}, e.g. API methods that require
a publisher key.
}
\examples{
# simple Web API request
request_webapi(
  api = public_api(),
  interface = "IStoreBrowseService",
  method = "GetStoreCategories",
  version = "v1"
)

# paginate through query results
# QueryRewardItems uses cursors but other methods
# also use page parameters
request_webapi(
  api = public_api(),
  interface = "ILoyaltyRewardsService",
  method = "QueryRewardItems",
  params = list(appids = 440),
  paginate = "cursor"
)

# send a storefront request
request_storefront(
  api = store_api(),
  interface = "search",
  method = "suggest",
  params = list(term = "team fortress")
)

# request_steamspy is a low-level alternative to the
# steamspy function
request_steamspy(list(request = "tag", tag = "Early Access"))

\dontrun{
# request_generic exists to enable non-standard API queries
# the following example is used internally in auth_* functions
request_generic(
  "https://login.steampowered.com/jwt/finalizelogin",
  method = "POST",
  params = list(
    nonce = "<refresh token>",
    sessionid = "<sessionid>",
    redir = "https://steamcommunity.com/login/home/?goto="
  )
)
}
}
