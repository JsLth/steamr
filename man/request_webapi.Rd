% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/http.R
\name{request_webapi}
\alias{request_webapi}
\alias{public_api}
\alias{partner_api}
\alias{store_api}
\alias{comm_api}
\alias{valve_api}
\title{API requests}
\usage{
request_webapi(
  api,
  interface,
  method,
  version = "v1",
  params = list(),
  http_method = "GET",
  simplify = TRUE,
  paginate = NULL,
  format = c("json", "xml", "vdf"),
  serror = TRUE,
  dry = FALSE
)

public_api()

partner_api()

store_api()

comm_api()

valve_api()
}
\arguments{
\item{api}{URL to a supported Steam API. Can be \code{public_api()}
(public Web API), \code{partner_api()} (private Web API),
\code{store_api()} (store.steampowered), \code{comm_api()} (steamcommunity),
or \code{valve_api()} (valvesoftware). Can also be any other host.}

\item{interface}{Interface containing the API method.}

\item{method}{Method that is to be requested.}

\item{version}{Version string of the API method. Usually, this is \code{v1},
sometimes it is \code{v2}, and in rare occasions it can go as high as
\code{v3}.}

\item{params}{A list of parameters to send with the request. Note that
\code{input_json} blobs need to be pre-formatted. Most (but not all)
methods require an API key in the \code{key} parameter. Authenticated
methods require an access_token in \code{access_token}.}

\item{http_method}{HTTP method to be used. The Steam Web API and storefront
API only take \code{GET} and \code{POST}.}

\item{simplify}{Whether to simplify the output or leave it as a nested
list.}

\item{paginate}{If specified, tries to paginate through response pages.
Can be one of \code{cursor}, \code{offset}, and \code{input_json}.
\code{cursor} takes the \code{next_cursor} value of the response and
re-inserts it in the \code{cursor} parameter of the next request.
\code{offset} takes increments the \code{page} parameter by 1 with
each request. \code{input_json} re-creates the \code{input_json} blob
with an incremented \code{page} parameter with each request.}

\item{format}{Format of the response. One of \code{json}, \code{xml}, or
\code{vdf}. \code{vdf} is Steam's
\href{https://developer.valvesoftware.com/wiki/KeyValues}{KeyValues} format,
which can be parsed using \code{\link{parse_vdf}}.}

\item{serror}{Whether to throw a formatted error when the response has the
\code{X-eresult} header signifying an API error.}

\item{dry}{If \code{TRUE} does not run the request, but returns the
result of a dry run to a local server. See \code{\link[httr2]{req_dry_run}}.}
}
\value{
The formatted response of the request. If \code{format = "json"},
formats the response as a list or dataframe (depending on the
\code{simplify} argument). If \code{format = "xml"}, returns an \code{xml}
object of the \code{\link[xml2]{xml2}} library. If \code{format = "vdf"},
returns the unformatted string of a VDF document that can be parsed with
\code{\link{parse_vdf}}.
}
\description{
Send HTTP requests to any of the available Steam APIs. As of yet,
\code{steamr} supports the Web API, storefront API, SteamSpy and
steamcmd.net. Generic requests to any other URL can also be made.
}
