% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/reviews.R
\name{stf_app_reviews}
\alias{stf_app_reviews}
\alias{wba_app_review}
\alias{stf_review_histogram}
\title{Reviews}
\usage{
stf_app_reviews(
  appid,
  day_range = NULL,
  start_date = NULL,
  end_date = NULL,
  date_range_type = "all",
  filter = "recent",
  language = "all",
  review_type = "all",
  purchase_type = "steam",
  playtime = c(0, 0),
  filter_offtopic_activity = TRUE,
  paginate = FALSE,
  max_pages = 10,
  num_per_page = 20,
  cursor = NULL
)

wba_app_review(steamid, appid)

stf_review_histogram(appid, language = "english", review_score_preference = 2)
}
\arguments{
\item{appid}{Application ID referencing a Steam application. There are
generally two ways of retrieving an appID:
\itemize{
 \item{Inspect or parse the store URL of an application, e.g. \code{https://store.steampowered.com/app/10/CounterStrike/}}
 \item{Query appIDs programmatically, e.g. using \code{\link{search_apps}}}
}}

\item{day_range}{Number of days from now to \code{n} days ago to look for
reviews, e.g. \code{day_range = 5} looks for reviews in the last 5 days.}

\item{start_date}{Date-time object describing the earliest time to look for
reviews. Ignored if \code{date_range_type = "all"}.}

\item{end_date}{Date-time object describing the latest time to look for
reviews. Ignored if \code{date_range_type = "all"}.}

\item{date_range_type}{Specifies what to do with reviews within the
date range set by \code{start_date} and \code{end_date}. Options include
\code{include}, \code{exclude}, and \code{all}. If \code{all}, ignores
\code{end_date} and \code{start_date}.}

\item{filter}{Specifies the sort order. Can be one of \code{summary},
\code{recent}, \code{updated}, and \code{all}. \code{summary} returns
a summary of 10 most helpful comments. \code{all} sorts by helpfulness
and applies moving windows in order to always return reviews (see the Steam
\href{https://steamcommunity.com/games/593110/announcements/detail/2666556941788470579}{blog article}).
\code{recent} sorts by creation time and \code{updated} sorts by update time.
For \code{get_all_app_reviews}, \code{filter} must be either \code{updated} or
\code{recent}.}

\item{language}{Which review language to include in the output. A full
list of platform supported languages can be found in the
\href{https://partner.steamgames.com/doc/store/localization/languages}{Steamworks documentation}.
Defaults to \code{"all"}, which removes the language filter.}

\item{review_type}{Filters by the type of review. Can be either
\code{positive}, \code{negative}, or \code{all}.}

\item{purchase_type}{Filters by the type of purchase. Can be either
\code{steam}, \code{non_steam_purchase}, or \code{all}.}

\item{playtime}{Length-2 numeric vector specifying the minimum and maximum
playtime in hours that the reviewer should have played the game. If
\code{0}, no required (minimum or maximum) play time is set.}

\item{filter_offtopic_activity}{Whether to filter offtopic activity. This
especially includes so-called "review bombs", i.e. many reviews written
by users in a very short time to artificially alter the review score of a
game. See the Steam
\href{https://steamcommunity.com/games/593110/announcements/detail/1808664240333155775}{blog entry}
for more information.}

\item{paginate}{If \code{TRUE}, paginates through the results. Some methods
provide data access in digestible chunks and do not return all available
information at once. The \code{paginate} automatically retrieves all pages
until \code{max_pages} is reached.}

\item{max_pages}{Maximum number of pages to paginate. Ignored if
\code{paginate} is \code{FALSE}. Defaults to \code{Inf} such that all
available data are paginated.}

\item{num_per_page}{By default, Steam only shows 20 reviews per query.
By setting \code{num_per_page}, this number can go up to a maximum of 100.
For larger queries, consider iterating using \code{get_all_app_reviews}.}

\item{cursor}{For each review page query, \code{get_app_reviews} returns a
cursor ID. This ID can be used to paginate and iterate through many review pages
at once. This argument is probably useless for most use cases and is
extensively used for iteration purposes by \code{get_all_app_reviews}.}

\item{steamid}{SteamID of a user. The SteamID must be in a format that can
be converted by \code{\link{convert_steamid}}. This includes vanity,
Steam64, Steam2, and Steam3 IDs.}

\item{review_score_preference}{Unknown. In my tests, changing this argument
did not yield a measurable difference in the results.}
}
\value{
\code{stf_app_reviews} and \code{wba_app_review} return a dataframe
containing IDs, texts, and metadata of application reviews on Steam. See the
\href{https://github.com/Revadike/InternalSteamWebAPI/wiki/Get-App-Reviews#response}{community docs}
for more info on the output of \code{stf_app_reviews}.

\code{stf_review_histogram} returns a named list containing rollups aggregated
by month (\code{rollups}), and rollups of the last 30 days aggregated by
day (\code{recent}). Each list element is a dataframe containing the
corresponding date and the aggregated thumps up/down.
}
\description{
Retrieve user reviews for a given Steam application.

\itemize{
 \item{\code{get_app_reviews} retrieves up to 100 reviews.}
 \item{\code{get_all_app_reviews} has the ability to return much more reviews
depending on input parameters.}
}
}
\examples{
\donttest{# reviews of counter-strike
stf_app_reviews(10)

# get all negative german reviews
stf_app_reviews(
  10,
  language = "german",
  review_type = "negative",
  paginate = TRUE,
  max_pages = Inf
)

# get all recent reviews up to page 10
stf_app_reviews(10, filter = "recent", max_pages = 10)

(hist <- stf_review_histogram(10)$rollups)

if (requireNamespace("ggplot2", quietly = TRUE)) {
  library(ggplot2)

  ggplot(hist) +
    geom_bar(
      aes(x = date, y = recommendations_up),
      stat = "identity",
      fill = "#66c0f4",
      color = NA,
      width = resolution(as.double(hist$date) * 0.5)
    ) +
    geom_bar(
      aes(x = date, y = recommendations_down * - 1),
      stat = "identity",
      fill = "#a34c25",
      color = NA,
      width = resolution(as.double(hist$date) * 0.5)
    ) +
    geom_hline(yintercept = 0, color = "#66c0f4") +
    labs(title = "Overall reviews: Counter-Strike", x = NULL, y = NULL) +
    theme_minimal() +
    theme(
      plot.background = element_rect(fill = "#2a475e"),
      text = element_text(color = "white"),
      panel.grid = element_blank(),
      axis.line = element_blank(),
      axis.text.y = element_text(color = "white"),
      axis.text.x = element_text(color = "#66c0f4")
    )
}}
}
\section{Authentication}{
The functions of this reference page are subject to the following authentication requirements (Key = API key needed, Login = user login needed):
\tabular{llll}{
    \strong{Function} \tab \strong{Key} \tab \strong{Login} \tab \strong{Note}\cr
    \code{stf_app_reviews}      \tab no \tab no  \tab                                                    \cr
    \code{wba_app_review}       \tab no \tab yes \tab Can only retrieve reviews of the authenticated user\cr
    \code{stf_review_histogram} \tab no \tab no  \tab                                                    
}



To learn more about user authentication, see \code{\link{auth_credentials}}.
}
