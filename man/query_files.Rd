% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/files.R
\name{query_files}
\alias{query_files}
\alias{get_published_file}
\alias{get_user_files}
\title{Published files}
\usage{
query_files(
  query_type = NULL,
  numperpage = 100L,
  creator_appid = NULL,
  consumer_appid = NULL,
  required_tags = NULL,
  excluded_tags = NULL,
  match_all_tags = FALSE,
  required_flags = NULL,
  omitted_flags = NULL,
  search_text = NULL,
  filetype = NULL,
  child_publishedfileid = NULL,
  days = NULL,
  only_recent_votes = FALSE,
  cache_max_age_seconds = NULL,
  elanguage = 0L,
  total_only = FALSE,
  ids_only = FALSE,
  return = "details",
  playtime_days = NULL,
  strip_bbcode = FALSE,
  desired_revision = NULL,
  paginate = TRUE
)

get_published_file(
  publishedfileids,
  return = NULL,
  playtime_days = NULL,
  language = "english",
  appid = NULL,
  strip_bbcode = FALSE,
  desired_revision = NULL
)

get_user_files(
  steamid,
  creator_appid = NULL,
  consumer_appid = NULL,
  shortcutid = NULL,
  numperpage = 100,
  filetype = NULL,
  requiredtags = NULL,
  excludedtags = NULL,
  cache_mag_age_seconds = NULL,
  language = "english",
  excluded_content_descriptors = NULL,
  total_only = FALSE,
  ids_only = FALSE,
  return = NULL,
  playtime_days = NULL,
  desired_revision = NULL
)
}
\arguments{
\item{query_type}{How to rank the query. Can be a code defined in
\code{\link{EPublishedFileQueryType}}.}

\item{numperpage}{Number of results per page, up to a maximum of 100.}

\item{creator_appid}{AppID to filter by. Only files created by this
appID will be returned.}

\item{consumer_appid}{AppID to filter by. Only files consumed by this
appID will be returned.}

\item{required_tags}{Tags that must be present in the queried files. If
\code{match_all_tags} is  \code{TRUE}, then all tags must be present.}

\item{excluded_tags}{Tags that must not be present in the queried files.}

\item{match_all_tags}{If \code{TRUE}, then all tags in \code{required_tags}
must be present in the queried files, otherwise only at least one.}

\item{required_flags}{Flags that must be present in the queried files.}

\item{omitted_flags}{Flags that must not be present in the queried files.}

\item{search_text}{Text to match in the file's title or description.}

\item{filetype}{File types to return. Can be one of the codes in
\code{\link{EPublishedFileInfoMatchingFileType}}.}

\item{child_publishedfileid}{PublishedfileID that must be referenced by
the queried files.}

\item{days}{If \code{query_type = 3} (ranked by trend), specifies the
number of days to get votes for (between 1 and 7 days).}

\item{only_recent_votes}{If \code{query_type = 3} (ranked by trend),
specifies whether result should only include files that have been voted
on in the last \code{days} days.}

\item{cache_max_age_seconds}{Maximum file age in seconds. If set, files
are allowed to get stale by the amount of time specified.}

\item{total_only}{If \code{TRUE}, only returns the total number of queried
files.}

\item{ids_only}{If \code{TRUE}, only returns the queried publishedfileIDs.
Takes precedence over the \code{return} argument.}

\item{return}{A character vector specifying the information that should be
returned. Can be several of the following: \code{vote_data}, \code{tags},
\code{kv_tags}, \code{previews}, \code{children}, \code{short_description},
\code{for_sale_data}, \code{metadata}, \code{playtime_stats}, \code{details}
and \code{reactions}. \code{details} returns a default set of details.
If \code{playtime_stats}, returns playtime stats for the number of days
specified in \code{playtime_days}. \code{children} returns the
publishedfileIDs referenced by the published files. \code{for_sale_data}
returns pricing information where applicable. \code{short_description}
replaces the \code{file_description} with a \code{short_description} field
containing a shorter description.}

\item{playtime_days}{If \code{return} includes \code{playtime_stats},
specifies the number of days for which to return stats.}

\item{strip_bbcode}{If \code{TRUE}, strips all BB code from descriptions.}

\item{desired_revision}{Specifies the state of file revision. Can be a
code specified in \code{\link{EPublishedFileRevision}}.}

\item{publishedfileid}{A vector of publishedfileID of a file to get details
for.}
}
\value{
\describe{
 \item{\code{query_files}}{A dataframe containing least the request result
 code, the publishedfileID and the SteamID of the creator. Depending on
 the \code{return} argument, further details are provided. If
 \code{total_only = TRUE}, returns a length-1 vector containing the total
 number of queried files. If \code{ids_only}, forces the output to return
 the minimum amount of information (publishedfileIDs and SteamIDs only).}

 \item{\code{get_published_file}}{A dataframe with one row containing
 default details of a published file. Depending on the \code{return}
 argument, further details are provided. Default details are always
 the minimum amount of information returned.}
}
}
\description{
Query published files.
}
\examples{
# query the first three pages
options(steamr_max_reqs = 3)
query_files()

# return essential details and pricing data
query_files(return = c("details", "for_sale_data"))

# query only for artworks
# an overview of filetypes can be retrieved using:
# EPublishedFileInfoMatchingFileType()
query_files(filetype = 3)

# query only workshop collections
query_files(filetype = 1)

# query all files that were produced by team fortress
query_files(creator_appid = 440)

# get the number of files produced by team fortress
query_files(total_only = TRUE)

# retrieve files published in portuguese language
query_files(language = 4)
}
